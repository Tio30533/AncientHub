local s="";local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' local function d(x) x=x:gsub('[^'..b..'=]','') return (x:gsub('.',function(c) if c=='=' then return '' end local r,f='',(b:find(c)-1) for i=6,1,-1 do r=r..((f%2^i-f%2^(i-1))>0 and '1' or '0') end return r end):gsub('%d%d%d%d%d%d%d%d',function(x)local v=0 for i=1,8 do v=v+(x:sub(i,i)=='1' and 2^(8-i) or 0) end return string.char(v) end)) end;local ok,err = pcall(function() local code = d(s) local f = loadstring or load; f(code)() end) if not ok then error(err) end
